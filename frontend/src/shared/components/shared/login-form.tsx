'use client';

import { cn } from '@/shared/lib/utils';
import {
  Button,
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  Input,
} from '@/shared/components/ui';
import React from 'react';
import { useForm } from 'react-hook-form';
import { loginSchema } from '@/shared/schemas/auth-schema';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

export function LoginForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {
  const form = useForm<z.infer<typeof loginSchema>>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: '',
    },
  });

  const onSubmit = (values: z.infer<typeof loginSchema>) => {
    console.log(values);
  };

  return (
    <div className={cn('flex flex-col gap-6', className)} {...props}>
      <Card className={'bg-s-background'}>
        <CardHeader className='text-center'>
          <CardTitle className='text-xl'>
            –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º <span className='text-primary'>üëã</span>
          </CardTitle>
          <CardDescription>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)}>
              <div className='grid gap-6'>
                <div className='grid gap-6'>
                  <FormField
                    control={form.control}
                    name={'email'}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–ü–æ—á—Ç–∞</FormLabel>
                        <FormControl>
                          <Input placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É'} {...field} />
                        </FormControl>

                        {form.formState.errors.email && (
                          <FormMessage>{form.formState.errors.email.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name={'password'}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>–ü–∞—Ä–æ–ª—å</FormLabel>
                        <FormControl>
                          <Input placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'} type={'password'} {...field} />
                        </FormControl>

                        {form.formState.errors.password && (
                          <FormMessage>{form.formState.errors.password.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />
                  <Button type='submit' className='w-full'>
                    –í–æ–π—Ç–∏
                  </Button>
                </div>
                <div className='text-center text-sm'>
                  –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?&nbsp;
                  <a href='#' className='underline underline-offset-4'>
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                  </a>
                </div>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
      <div className='text-balance text-center text-xs text-muted-foreground [&_a]:underline [&_a]:underline-offset-4 [&_a]:hover:text-primary'>
        –ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ <br /> <a href='#'>–£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a> –∏{' '}
        <a href='#'>–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
      </div>
    </div>
  );
}
